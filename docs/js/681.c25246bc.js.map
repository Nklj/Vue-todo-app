{"version":3,"file":"js/681.c25246bc.js","mappings":"iNACOA,MAAM,O,SACQA,MAAM,oB,GAKdA,MAAM,QAAQC,IAAI,S,GAElBD,MAAM,e,GAETE,EAAAA,EAAAA,GAA4C,SAArCC,IAAI,eAAc,eAAW,G,GAC9BH,MAAM,oBAAoBI,MAAA,oC,GAG3BC,KAAK,OAAOJ,IAAI,c,aAGrBC,EAAAA,EAAAA,GAA6E,UAArEF,MAAM,MAAMK,KAAK,SAASD,MAAA,yBAA4B,UAAM,G,oDAjB5EE,EAAAA,EAAAA,IAuBM,MAvBN,EAuBM,CAtBOC,EAAAA,OAAAA,EAAAA,EAAAA,OAAXD,EAAAA,EAAAA,IAoBM,MApBN,EAoBM,EAnBJJ,EAAAA,EAAAA,GAAuB,WAAAM,EAAAA,EAAAA,IAAjBD,EAAAA,KAAKE,OAAK,IAEhBP,EAAAA,EAAAA,GAgBO,QAhBAQ,SAAM,8BAAUH,EAAAA,eAAAA,EAAAA,iBAAAA,IAAa,eAApC,EAEEL,EAAAA,EAAAA,GAAqC,MAArC,EAAqC,WAErCA,EAAAA,EAAAA,GAIM,MAJN,EAIM,WAHJA,EAAAA,EAAAA,GAAmH,YAAzGE,MAAA,uB,qCAAmCO,EAAAA,YAAWC,GAAEC,GAAG,cAAcb,MAAM,wBAAjF,iBAA6CW,EAAAA,eAC7CG,GACAZ,EAAAA,EAAAA,GAAyG,OAAzG,GAAyGM,EAAAA,EAAAA,IAAhCG,EAAAA,YAAYI,QAAQ,QAAK,MAGpGb,EAAAA,EAAAA,GAAoC,QAApC,EAAoC,UAEd,cAAXK,EAAAA,KAAKS,SAAM,WAAtBV,EAAAA,EAAAA,IAGM,MAAAW,EAAA,CAFJC,GACAhB,EAAAA,EAAAA,GAAmF,UAA3EF,MAAM,WAAWK,KAAK,SAAUc,QAAK,oBAAEZ,EAAAA,cAAAA,EAAAA,gBAAAA,KAAc,qBAF/D,gBAZF,SAHF,WAqBAD,EAAAA,EAAAA,IAA4B,IAAAc,EAAlB,oB,CAKd,OACEC,SAAU,CACRC,OACE,OAAOC,KAAKC,OAAOC,QAAQC,UAAUH,KAAKI,OAAOC,OAAOf,GAC1D,GAEFgB,KAAM,KAAM,CACVC,YAAa,GACbC,MAAO,KACPC,KAAM,OAERC,UACEV,KAAKO,YAAcP,KAAKD,KAAKQ,YAC7BP,KAAKQ,MAAQG,EAAEC,MAAMC,KAAKb,KAAKc,MAAMN,MAAO,CAC1CO,YAAa,YACbT,KAAMN,KAAKD,KAAKiB,OAElBhB,KAAKS,KAAOE,EAAEM,WAAWJ,KAAKb,KAAKc,MAAMI,WAAY,CACnDC,OAAQ,aACRC,YAAa,IAAIC,KAAKrB,KAAKD,KAAKU,MAChCa,gBAAgB,IAElBC,YAAW,KACTZ,EAAEa,kBAAF,GACC,EACJ,EACDC,QAAS,CACPC,gBACE1B,KAAKC,OAAO0B,SAAS,aAAc,CACjCrC,GAAIU,KAAKD,KAAKT,GACdiB,YAAaP,KAAKO,YAClBE,KAAMT,KAAKS,KAAKA,OAElBT,KAAK4B,QAAQC,KAAK,QACnB,EACDC,eACE9B,KAAKC,OAAO0B,SAAS,eAAgB3B,KAAKD,KAAKT,IAC/CU,KAAK4B,QAAQC,KAAK,QACpB,GAEFE,YACM/B,KAAKS,MAAQT,KAAKS,KAAKuB,SACzBhC,KAAKS,KAAKuB,UAGRhC,KAAKQ,OAASR,KAAKQ,MAAMwB,SAC3BhC,KAAKQ,MAAMwB,SAEf,G,QCvEF,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,O","sources":["webpack://vue-test-task/./src/views/TaskView.vue","webpack://vue-test-task/./src/views/TaskView.vue?be59"],"sourcesContent":["<template>\r\n  <div class=\"row\">\r\n    <div v-if=\"task\" class=\"col s6 offset-s3\">\r\n      <h1>{{task.title}}</h1>\r\n\r\n      <form @submit.prevent=\"submitHandler\">\r\n\r\n        <div class=\"chips\" ref=\"chips\"></div>\r\n\r\n        <div class=\"input-field\">\r\n          <textarea style=\"min-height: 150px\" v-model=\"description\" id=\"description\" class=\"materialize-textarea\"></textarea>\r\n          <label for=\"description\">Description</label>\r\n          <span class=\"character-counter\" style=\"float: right; font-size: 12px;\">{{description.length}}/2048</span>\r\n        </div>\r\n\r\n        <input type=\"text\" ref=\"datepicker\">\r\n\r\n        <div v-if=\"task.status !== 'completed'\">\r\n          <button class=\"btn\" type=\"submit\" style=\"margin-right: 1rem;\">Update</button>\r\n          <button class=\"btn blue\" type=\"button\" @click=\"completeTask\">Complete task</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n    <p v-else>Task not found</p>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  computed: {\r\n    task() {\r\n      return this.$store.getters.taskById(+this.$route.params.id)\r\n    }\r\n  },\r\n  data: () => ({\r\n    description: '',\r\n    chips: null,\r\n    date: null,\r\n  }),\r\n  mounted() {\r\n    this.description = this.task.description\r\n    this.chips = M.Chips.init(this.$refs.chips, {\r\n      placeholder: 'Task tags',\r\n      data: this.task.tags\r\n    })\r\n    this.date = M.Datepicker.init(this.$refs.datepicker, {\r\n      format: 'dd.mm.yyyy',\r\n      defaultDate: new Date(this.task.date),\r\n      setDefaultDate: true\r\n    })\r\n    setTimeout(() => {\r\n      M.updateTextFields()\r\n    }, 0)\r\n  },\r\n  methods: {\r\n    submitHandler() {\r\n      this.$store.dispatch('updateTask', {\r\n        id: this.task.id,\r\n        description: this.description,\r\n        date: this.date.date\r\n      })\r\n      this.$router.push('/list')\r\n    },\r\n    completeTask() {\r\n      this.$store.dispatch('completeTask', this.task.id)\r\n      this.$router.push('/list')\r\n    }\r\n  },\r\n  destroyed() {\r\n    if (this.date && this.date.destroy) {\r\n      this.date.destroy()\r\n    }\r\n\r\n    if (this.chips && this.chips.destroy) {\r\n      this.chips.destroy()\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n\r\n</style>","import { render } from \"./TaskView.vue?vue&type=template&id=88bc737e\"\nimport script from \"./TaskView.vue?vue&type=script&lang=js\"\nexport * from \"./TaskView.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"C:\\\\Users\\\\vlkvn\\\\MyProjects\\\\Vue\\\\vue-test-task\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["class","ref","_createElementVNode","for","style","type","_createElementBlock","$options","_toDisplayString","title","onSubmit","_ctx","$event","id","_hoisted_5","length","status","_hoisted_8","_hoisted_9","onClick","_hoisted_10","computed","task","this","$store","getters","taskById","$route","params","data","description","chips","date","mounted","M","Chips","init","$refs","placeholder","tags","Datepicker","datepicker","format","defaultDate","Date","setDefaultDate","setTimeout","updateTextFields","methods","submitHandler","dispatch","$router","push","completeTask","destroyed","destroy","__exports__","render"],"sourceRoot":""}